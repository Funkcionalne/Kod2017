-- kodovanie UTF-8 bez BOM (Notepad++)
module Main where

import Terms
import qualified Beta as F
import Test.HUnit

main = do
  runTestTT $  
    TestList [
      TestList [ 
            TestCase $ assertEqual ("free " ++ (show t))
                                   (free t)
                                   (F.free t) | t<- alls]
     ]                              
------------
alls = [omega, isucc, iplus, itimes, ipower, true, false, land, 
        lor, lnot, lxor, y, isZero, pair, first, second]

vars = ["x", "y", "z"]        

omega = fromString "Î»x.(x x)"
isucc  = fromString "Î»n.Î»f.Î»x.(f ((n f) x))"
iplus =  fromString "Î»m.Î»n.Î»f.Î»x.((m f) ((n f) x))" 
itimes = fromString "Î»m.Î»n.Î»f.Î»x.((m (n f)) x)"
ipower = fromString "Î»m.Î»n.(n m)"
true =  fromString "Î»x.Î»y.x"
false = fromString "Î»x.Î»y.y"
land =  fromString "Î»x.Î»y.((x y) FALSE)"
lor =   fromString "Î»x.Î»y.((x TRUE) y)"
lnot =  fromString "Î»x.((x FALSE) TRUE)" 
lxor =  fromString "Î»x.Î»y.((x ((y FALSE) TRUE)) ((y TRUE) FALSE))"
y =     fromString "Î»f.(Î»x.(f (x x)) Î»x.(f (x x)))"
isZero =fromString "Î»n.((n Î»y.FALSE) TRUE)"
pair =  fromString "Î»x.Î»y.Î»c.((c x) y)"
first = fromString "Î»x.(x TRUE)"
second =fromString "Î»x.(x FALSE)"

 
------- riesenie Mario Lipovsky, 2015

same :: LExp -> LExp -> Bool
same (ID _) (ID _)       = True
same (LAMBDA _ e1) (LAMBDA _ e2) = same e1 e2
same (APP e1 e2) (APP f1 f2)  = same e1 f1 && same e2 f2
same _ _ = False

-- `subterms l` vráti zoznam všetkých podtermov termu `l`
subterms :: LExp -> [LExp]
subterms (ID x)       = [ID x]
subterms (LAMBDA x e) = (LAMBDA x e):(subterms e)
subterms (APP e1 e2)  = ((APP e1 e2):(subterms e1)) ++ (subterms e2)

-- `free l` vráti zoznam všetkých premenných, ktoré majú vo¾ný výskyt v terme `l`
free :: LExp -> [Var]
free (ID x)       = [x]
free (LAMBDA x e) = filter (/=x) (free e)
free (APP e1 e2)  = (free e1) ++ (free e2)
 
-- `bound l` vráti zoznam všetkých premenných, ktoré majú viazaný výskyt v terme `l`
bound :: LExp -> [Var]
bound (ID x)       = []
bound (LAMBDA x e) = x:(bound e)
bound (APP e1 e2)  = (bound e1) ++ (bound e2)
 
-- `substitute v k l` substituuje všetky vo¾né výskyty `v` v terme `l` za `k`
substitute ::  Var -> LExp -> LExp -> LExp
substitute x k (ID y)
  | x == y    = k
  | otherwise = ID y
substitute x k (APP e1 e2) = APP (substitute x k e1) (substitute x k e2)
substitute x k (LAMBDA y e)
  | x == y = LAMBDA y e
  -- nove mena premennych budu x0, x1, x2 ... take, co nie su volne v e, /= x, /= y
  | (x `elem` free(e)) && (y `elem` free(k)) = LAMBDA w (substitute x k (substitute y (ID w) e))
  | otherwise = LAMBDA y (substitute x k e)
    where
      w = head [ nova | nova <- map (('x':).show) [0..], nova `notElem`  (free e), nova /= x, nova /=y] 

-----------------------------------------------------------------------------------------------
      
-- `betaReduce l` spraví nejaké beta redukcie v `l`
-- pod¾a Vami zvolenej stratégie
      
betaReduce :: LExp -> LExp
betaReduce (ID x)                 = ID x
-- eta redukcia
--betaReduce (LAMBDA x (APP e y))
-- | (ID x)==y && (x `elem` free(e)) == False = betaReduce e
-- | otherwise                                = LAMBDA x (betaReduce (APP e y))
betaReduce (LAMBDA x e)           = LAMBDA x (betaReduce e)
betaReduce (APP (LAMBDA x e1) e2) = substitute x e2 e1
betaReduce (APP e1 e2)            = APP (betaReduce e1) (betaReduce e2)

-- `normalForm l` iteruje `betaReduce` na `l`, kým sa mení 
normalForm :: LExp -> LExp
normalForm e = normalForm' e (betaReduce e)
  where
    normalForm' e1 e2
      | e1 == e2  = e2
      | otherwise = normalForm' e2 (betaReduce e2)
      
------------------------------------------------ 

splitOn :: Char -> String -> (String, String)
splitOn c xs = splitOn' [] xs c 0
  where
    splitOn' xs [] c n    = (reverse xs,[])
    splitOn' xs (y:ys) c n
      | y==c && n==0 = (reverse xs, ys)
      | y=='('       = splitOn' (y:xs) ys c (n+1)
      | y==')'       = splitOn' (y:xs) ys c (n-1)
      | otherwise    = splitOn' (y:xs) ys c n
  
fromString :: String -> LExp
fromString str 
  | str `elem` fbase = snd (head [x | x<-base, fst x == str ]) 
  | (head str == 'Î»') || (head str == '\\') = LAMBDA (fst rozdel_b) (fromString (snd rozdel_b))
  | head str == '('  = APP (fromString (fst rozdel_m))  (fromString (snd rozdel_m))
  | otherwise        = ID str
    where 
      rozdel_b = splitOn '.' (tail str)
      rozdel_m = splitOn ' ' (tail (init str))
      fbase = map fst base
 
church 0 = fromString "Î»f.Î»x.x"
church n = normalForm( APP (fromString "succ") (church (n-1)))      
      
base=[
  ("i", LAMBDA "x" (ID "x")),
  ("k", LAMBDA "x" (LAMBDA "y" (ID "x"))),
  ("s", LAMBDA "x" (LAMBDA "y" (LAMBDA "z" (APP (APP (ID "x") (ID "z")) (APP (ID "y") (ID "z")))))),
  ("omega", fromString "Î»x.(x x)"),
    
  ("succ",  fromString "Î»n.Î»f.Î»x.(f ((n f) x))"),
  ("+",     fromString "Î»m.Î»n.Î»f.Î»x.((m f) ((n f) x))"), 
  ("*",     fromString "Î»m.Î»n.Î»f.Î»x.((m (n f)) x)"),
  ("^",     fromString "Î»m.Î»n.(n m)"),
    
  ("TRUE",  fromString "Î»x.Î»y.x"),
  ("FALSE", fromString "Î»x.Î»y.y"),
  ("AND",   fromString "Î»x.Î»y.((x y) FALSE)"),
  ("OR",    fromString "Î»x.Î»y.((x TRUE) y)"),
  ("NOT",   fromString "Î»x.((x FALSE) TRUE)"), 
  ("XOR",   fromString "Î»x.Î»y.((x ((y FALSE) TRUE)) ((y TRUE) FALSE))"),
  
  ("Y",     fromString "Î»f.(Î»x.(f (x x)) Î»x.(f (x x)))"),
  
  ("isZero",fromString "Î»n.((n Î»y.FALSE) TRUE)"),
  
  ("PAIR",  fromString "Î»x.Î»y.Î»c.((c x) y)"),
  ("FST",   fromString "Î»x.(x TRUE)"),
  ("SND",   fromString "Î»x.(x FALSE)"),
  
  -- creates list (with pairs) of size n+1, with n*f and 1*x  
  --("fList", fromString "Î»n.Î»f.(n Î»x.((PAIR f) x))"),
  -- removes 1st element of list, then applies 1st pair element on 2nd element recursively
  --("pred'",  fromString "Î»n.Î»f.Î»g.((Y Î»A.Î»p.((FST p) (A (SND p)))) (SND (((fList n) f) ((PAIR Î»x.g) 0))))"),
  --("pred",   fromString "Î»n.(((isZero n) 0) (pred' n))"),
  ("pred",   fromString "Î»n.Î»f.Î»x.(((n Î»g.Î»h.(h (g f))) Î»u.x) Î»u.u)"),
    
  -- n-krat aplikuje predecessora na m
  ("-",   fromString "Î»m.Î»n.((n pred) m)"),
  -- return n-m != 0 (v skutocnosti (n-m <= 0)' <=> (n<=m)' <=> n>m 
  ("<",    fromString "Î»m.Î»n.(NOT (isZero ((- n) m)))"),
  
  -- skus(o,m,n) = IF((o+1)*n > m) o ELSE skus(o+1,m,n)   
  ("/", fromString "((Y Î»skus.Î»o.Î»m.Î»n.((((< m) ((* (succ o)) n)) o) (((skus (succ o)) m) n))) 0)"),
  -- return m - n*(m div n)
  ("%", fromString "Î»m.Î»n.((- m) ((* n) ((/ m) n)))"),
  
  
  ("sum",   fromString "(Y Î»S.Î»n.(((isZero n) 0) ((+ n) (S (pred n)))))"),  -- do 4 s rek. pred / inak aj 15
  ("fac",   fromString "(Y Î»F.Î»n.(((isZero n) 1) ((* n) (F (pred n)))))")   -- do 3 s rek. pred / 
  
  ] ++ (take 20 [(show n, church n) | n <- [0..]])
 
 
calc x = normalForm (fromString x)